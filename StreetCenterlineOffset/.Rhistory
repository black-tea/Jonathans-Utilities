# select only relevant variables
select(case_id, accident_year, collision_severity, alcohol_involved, int_id) %>%
# only last five full years of data (2012-2016)
filter(accident_year >= 2012 & accident_year <= 2016) %>%
# remove any collisions where alcohol was involved
filter(alcohol_involved != 'Y') %>%
# only intersted in collision history at candidate locations
filter(int_id %in% candidate_int$Int) %>%
# also remove NA values
filter(!is.na(int_id))
collisions
glimpse(collisions)
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id)
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join collisions to party table
left_join(collisions)
parties
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join collisions to party table
left_join(collisions) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
fiter(any(move_pre_acc %in% c('E','F')))
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join collisions to party table
left_join(collisions) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F')))
View(parties)
View(parties)
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join collisions to party table
left_join(collisions) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F'))) %>%
mutate(count = n()) %>%
ungroup()
### Script for Left-Turn Prioritization ###
# Load Libraries
library(tidyverse)
# Import Data
collisions <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/switrs_los_angeles20180112.csv')
parties <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/party_los_angeles20180112.csv')
candidate_int <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/Vision Zero Signals - LT Crash Analysis.csv')
# Clean and Reformat Data Tables
candidate_int <- candidate_int %>%
select(Int, Primary.Street, X.Street, Phasing.Type, Phasing.Direction.s.)
collisions <- collisions %>%
# select only relevant variables
select(case_id, accident_year, collision_severity, alcohol_involved, int_id) %>%
# only last five full years of data (2012-2016)
filter(accident_year >= 2012 & accident_year <= 2016) %>%
# remove any collisions where alcohol was involved
filter(alcohol_involved != 'Y') %>%
# only intersted in collision history at candidate locations
filter(int_id %in% candidate_int$Int) %>%
# also remove collisions without an assigned intersection
filter(!is.na(int_id)) %>%
# drop alcohol_involved variable after filter
select(-alcohol_involved)
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join collisions to party table
left_join(collisions) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F'))) %>%
mutate(count = n()) %>%
ungroup()
### Script for Left-Turn Prioritization ###
# Load Libraries
library(tidyverse)
# Import Data
collisions <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/switrs_los_angeles20180112.csv')
parties <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/party_los_angeles20180112.csv')
candidate_int <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/Vision Zero Signals - LT Crash Analysis.csv')
# Clean and Reformat Data Tables
candidate_int <- candidate_int %>%
select(Int, Primary.Street, X.Street, Phasing.Type, Phasing.Direction.s.)
collisions <- collisions %>%
# select only relevant variables
select(case_id, accident_year, collision_severity, alcohol_involved, int_id) %>%
# only last five full years of data (2012-2016)
filter(accident_year >= 2012 & accident_year <= 2016) %>%
# remove any collisions where alcohol was involved
filter(alcohol_involved != 'Y') %>%
# only intersted in collision history at candidate locations
filter(int_id %in% candidate_int$Int) %>%
# also remove collisions without an assigned intersection
filter(!is.na(int_id)) %>%
# drop alcohol_involved variable after filter
select(-alcohol_involved)
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join collisions to party table
left_join(collisions) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F'))) #%>%
# mutate(count = n()) %>%
# ungroup()
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join collisions to party table
left_join(collisions) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F'))) %>%
filter(n() >= 2) %>%
ungroup()
### Script for Left-Turn Prioritization ###
# Load Libraries
library(tidyverse)
# Import Data
collisions <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/switrs_los_angeles20180112.csv')
parties <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/party_los_angeles20180112.csv')
candidate_int <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/Vision Zero Signals - LT Crash Analysis.csv')
# Clean and Reformat Data Tables
candidate_int <- candidate_int %>%
select(Int, Primary.Street, X.Street, Phasing.Type, Phasing.Direction.s.)
collisions <- collisions %>%
# select only relevant variables
select(case_id, accident_year, collision_severity, alcohol_involved, int_id) %>%
# only last five full years of data (2012-2016)
filter(accident_year >= 2012 & accident_year <= 2016) %>%
# remove any collisions where alcohol was involved
filter(alcohol_involved != 'Y') %>%
# only intersted in collision history at candidate locations
filter(int_id %in% candidate_int$Int) %>%
# also remove collisions without an assigned intersection
filter(!is.na(int_id)) %>%
# drop alcohol_involved variable after filter
select(-alcohol_involved)
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join collisions to party table
left_join(collisions) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F'))) %>%
filter(n() >= 2) %>%
ungroup()
# mutate(count = n()) %>%
# ungroup()
### Script for Left-Turn Prioritization ###
# Load Libraries
library(tidyverse)
# Import Data
collisions <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/switrs_los_angeles20180112.csv')
parties <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/party_los_angeles20180112.csv')
candidate_int <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/Vision Zero Signals - LT Crash Analysis.csv')
# Clean and Reformat Data Tables
candidate_int <- candidate_int %>%
select(Int, Primary.Street, X.Street, Phasing.Type, Phasing.Direction.s.)
collisions <- collisions %>%
# select only relevant variables
select(case_id, accident_year, collision_severity, alcohol_involved, int_id) %>%
# only last five full years of data (2012-2016)
filter(accident_year >= 2012 & accident_year <= 2016) %>%
# filter for KSIs
filter(collision_severity %in% c(1,2)) %>%
# remove any collisions where alcohol was involved
filter(alcohol_involved != 'Y') %>%
# only intersted in collision history at candidate locations
filter(int_id %in% candidate_int$Int) %>%
# also remove collisions without an assigned intersection
filter(!is.na(int_id)) %>%
# drop alcohol_involved variable after filter
select(-alcohol_involved)
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join collisions to party table
left_join(collisions) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F'))) %>%
# Select only collisions involving at least two parties
filter(n() >= 2) %>%
ungroup() %>%
# Filter again
filter(move_pre_acc %in% c('E','F')) %>%
group_by(int_id, dir_of_travel) %>%
summarise(ct = n())
write.csv(parties)
### Script for Left-Turn Prioritization ###
# Load Libraries
library(tidyverse)
# Import Data
collisions <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/switrs_los_angeles20180112.csv')
parties <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/party_los_angeles20180112.csv')
candidate_int <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/Vision Zero Signals - LT Crash Analysis.csv')
# Clean and Reformat Data Tables
candidate_int <- candidate_int %>%
select(Int, Primary.Street, X.Street, Phasing.Type, Phasing.Direction.s.)
collisions <- collisions %>%
# select only relevant variables
select(case_id, accident_year, collision_severity, alcohol_involved, int_id) %>%
# only last five full years of data (2012-2016)
filter(accident_year >= 2012 & accident_year <= 2016) %>%
# remove any collisions where alcohol was involved
filter(alcohol_involved != 'Y') %>%
# only intersted in collision history at candidate locations
filter(int_id %in% candidate_int$Int) %>%
# also remove collisions without an assigned intersection
filter(!is.na(int_id)) %>%
# drop alcohol_involved variable after filter
select(-alcohol_involved)
ksi_collisions <- collisions %>%
filter(collision_severity %in% c(1,2))
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F'))) %>%
# Select only collisions involving at least two parties
filter(n() >= 2) %>%
ungroup()
ksi_count <- parties %>%
# Filter for KSIs
filter(collision_severity %in% c(1,2))
# Filter by movement again
filter(move_pre_acc %in% c('E','F')) %>%
group_by(int_id, dir_of_travel) %>%
summarise(ct = n())
ksi_count <- parties %>%
# Filter for KSIs
filter(collision_severity %in% c(1,2)) %>%
# Filter by movement again
filter(move_pre_acc %in% c('E','F')) %>%
group_by(int_id, dir_of_travel) %>%
summarise(ct = n())
### Script for Left-Turn Prioritization ###
# Load Libraries
library(tidyverse)
# Import Data
collisions <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/switrs_los_angeles20180112.csv')
parties <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/party_los_angeles20180112.csv')
candidate_int <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/Vision Zero Signals - LT Crash Analysis.csv')
# Clean and Reformat Data Tables
candidate_int <- candidate_int %>%
select(Int, Primary.Street, X.Street, Phasing.Type, Phasing.Direction.s.)
collisions <- collisions %>%
# select only relevant variables
select(case_id, accident_year, collision_severity, alcohol_involved, int_id) %>%
# only last five full years of data (2012-2016)
filter(accident_year >= 2012 & accident_year <= 2016) %>%
# remove any collisions where alcohol was involved
filter(alcohol_involved != 'Y') %>%
# only intersted in collision history at candidate locations
filter(int_id %in% candidate_int$Int) %>%
# also remove collisions without an assigned intersection
filter(!is.na(int_id)) %>%
# drop alcohol_involved variable after filter
select(-alcohol_involved)
ksi_collisions <- collisions %>%
filter(collision_severity %in% c(1,2))
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join to collision table to get collision_severity
left_join(collisions)
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F'))) %>%
# Select only collisions involving at least two parties
filter(n() >= 2) %>%
ungroup()
ksi_count <- parties %>%
# Filter for KSIs
filter(collision_severity %in% c(1,2)) %>%
# Filter by movement again
filter(move_pre_acc %in% c('E','F')) %>%
group_by(int_id, dir_of_travel) %>%
summarise(ct = n())
### Script for Left-Turn Prioritization ###
# Load Libraries
library(tidyverse)
# Import Data
collisions <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/switrs_los_angeles20180112.csv')
parties <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/party_los_angeles20180112.csv')
candidate_int <- read.csv('Z:/VisionZero/GIS/Projects/2018-01_LeftTurnPhasingPrioritization/Data/Vision Zero Signals - LT Crash Analysis.csv')
# Clean and Reformat Data Tables
candidate_int <- candidate_int %>%
select(Int, Primary.Street, X.Street, Phasing.Type, Phasing.Direction.s.)
collisions <- collisions %>%
# select only relevant variables
select(case_id, accident_year, collision_severity, alcohol_involved, int_id) %>%
# only last five full years of data (2012-2016)
filter(accident_year >= 2012 & accident_year <= 2016) %>%
# remove any collisions where alcohol was involved
filter(alcohol_involved != 'Y') %>%
# only intersted in collision history at candidate locations
filter(int_id %in% candidate_int$Int) %>%
# also remove collisions without an assigned intersection
filter(!is.na(int_id)) %>%
# drop alcohol_involved variable after filter
select(-alcohol_involved)
ksi_collisions <- collisions %>%
filter(collision_severity %in% c(1,2))
parties <- parties %>%
# Select only relevant variables
select(case_id, party_number, party_type, dir_of_travel, move_pre_acc) %>%
# Filter for parties that are in the collision table
filter(case_id %in% collisions$case_id) %>%
# Join to collision table to get collision_severity
left_join(collisions) %>%
# Group by Case ID,
group_by(case_id) %>%
# Select only those case IDs where there was at least one person making a 'U' or 'L' turn
filter(any(move_pre_acc %in% c('E','F'))) %>%
# Select only collisions involving at least two parties
filter(n() >= 2) %>%
ungroup()
ksi_count <- parties %>%
# Filter for KSIs
filter(collision_severity %in% c(1,2)) %>%
# Filter by movement again
filter(move_pre_acc %in% c('E','F')) %>%
group_by(int_id, dir_of_travel) %>%
summarise(ct = n())
View(ksi_count)
ksi_count <- parties %>%
# Filter for KSIs
filter(collision_severity %in% c(1,2)) %>%
# Filter by movement again
filter(move_pre_acc %in% c('E','F')) %>%
group_by(int_id, dir_of_travel) %>%
summarise(ksi.ct = n())
col_count <- parties %>%
filter(move_pre_acc %in% c('E','F')) %>%
group_by(int_id, dir_of_travel) %>%
summarise(col.ct = n())
View(col_count)
inj_count <- parties %>%
# Filter for KSIs
filter(collision_severity %in% c(1,2,3,4)) %>%
# Filter by movement again
filter(move_pre_acc %in% c('E','F')) %>%
group_by(int_id, dir_of_travel) %>%
summarise(inj.ct = n())
View(inj_count)
sum(ksi_count$ksi.ct)
shiny::runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_points)
View(lafd_log)
View(lafd_points)
View(lafd_log)
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_log)
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_log)
View(lafd_log)
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_log)
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_paths)
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_paths)
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_paths)
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
a <- c(1,2,3)
b <- c(3,4,5)
a + b
shiny::runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_paths)
View(lafd_paths)
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_paths)
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_log)
lafd_log
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_log)
print(lafd_log)
glimplse(lafd_log)
glimpse(lafd_log)
runApp()
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_log)
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_log)
runApp('GitHub/Jonathans-Utilities/TPS')
View(lafd_paths)
shiny::runApp('GitHub/vzcd-shiny/app/VZ_Viewer')
# load libraries
library(sf)
library(dplyr)
library(leaflet)
library(units)
# import street data
caltrans <- st_read("Data/CaltransCenterlineD07_LACityClip.shp")
```{r}
calltrans_filtered <- caltrans %>%
select(
FULLNAME,
FC_DRAFT) %>%
filter(FC_DRAFT == 3) %>%
# Group & Merge by
group_by(FULLNAME) %>%
summarize() %>%
# Cast sfc_geometry mix to sfc_multilinestring
st_cast() %>%
# Select only those with a length > 1/4 mi (402.336m)
filter(st_length(.) > set_units(402.336, m))
# need to add st_line_merge to aggregate blocks up into segments
caltrans_merge <- st_line_merge(calltrans_filtered)
leaflet() %>%
addTiles() %>%
addPolylines(data=caltrans_merge)
st_write(caltrans_merge, 'caltrans_major.shp')
# load libraries
library(sf)
library(dplyr)
library(leaflet)
library(units)
# import street data
caltrans <- st_read("Data/CaltransCenterlineD07_LACityClip.shp")
calltrans_filtered <- caltrans %>%
select(
FULLNAME,
FC_DRAFT) %>%
filter(FC_DRAFT == 3) %>%
# Group & Merge by
group_by(FULLNAME) %>%
summarize() %>%
# Cast sfc_geometry mix to sfc_multilinestring
st_cast() %>%
# Select only those with a length > 1/4 mi (402.336m)
filter(st_length(.) > set_units(402.336, m))
# need to add st_line_merge to aggregate blocks up into segments
caltrans_merge <- st_line_merge(calltrans_filtered)
leaflet() %>%
addTiles() %>%
addPolylines(data=caltrans_merge)
st_write(caltrans_merge, 'caltrans_major.shp')
st_write(caltrans_merge, 'caltrans__major.shp')
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/Jonathans-Utilities/StreetCenterlineOffset")
source('~/.active-rstudio-document', echo=TRUE)
bss$ZWIDTH2 <- bss$ZLENGTH/2
View(bss)
bss$ZWIDTH2 <- bss$WIDTH/2
bss$ZWIDTH2 <- NULL
bss$ZWIDTH2 <- bss$ZWIDTH/2
bss$attr
bss@attr
bss
