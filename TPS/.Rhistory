extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.character(df$Lat)
df$Lng <- as.character(df$Lng)
sf_df <- st_as_sf(df,
agr=NA_agr_,
coords=c("Lat","Lng"),
#dim="XY",
remove=FALSE)
print(df)
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.double(df$Lat)
df$Lng <- as.double(df$Lng)
sf_df <- st_as_sf(df,
agr=NA_agr_,
coords=c("Lat","Lng"),
#dim="XY",
remove=FALSE)
print(df)
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.double(df$Lat)
df$Lng <- as.double(df$Lng)
sf_df <- st_as_sf(df,
agr=NA_agr_,
coords=c("Lat","Lng"),
dim="XY",
remove=FALSE)
print(df)
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.double(df$Lat)
df$Lng <- as.double(df$Lng)
# Convert to sf object
sf_df <- st_as_sf(df,
agr=NA_agr_,
coords=c("Lat","Lng"),
#dim="XY",
remove=FALSE)
print(df)
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.double(df$Lat)
df$Lng <- as.double(df$Lng)
# Convert to sf object
sf_df <- st_as_sf(df,
#agr=NA_agr_,
coords=c("Lat","Lng"),
#dim="XY",
remove=FALSE)
print(df)
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.numeric(df$Lat)
df$Lng <- as.numeric(df$Lng)
# Convert to sf object
sf_df <- st_as_sf(df,
#agr=NA_agr_,
coords=c("Lat","Lng"),
#dim="XY",
remove=FALSE)
print(df)
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.character(df$Lat)
df$Lng <- as.character(df$Lng)
# Convert to sf object
sf_df <- st_as_sf(df,
#agr=NA_agr_,
coords=c("Lat","Lng"),
#dim="XY",
remove=FALSE)
print(df)
as.numeric(df$Lng)
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.numeric(df$Lat)
df$Lng <- as.numeric(df$Lng)
df
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat
as.numeric(df$Lat)
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.numeric(as.character(df$Lat))
df$Lng <- as.numeric(as.character(df$Lng))
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.double(as.character(df$Lat))
df$Lng <- as.double(as.character(df$Lng))
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.character(df$Lat)
df$Lng <- as.character(df$Lng)
df$Lat
as.numeric(df$Lat)
df$Lat <- as.numeric(df$Lat)
df$Lat
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.numeric(df$Lat)
df$Lng <- as.numeric(df$Lng)
df$Lat
df$Lng
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.charcter(df$Lat)
df$Lng <- as.character(df$Lng)
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.charcter(df$Lat)
df$Lng <- as.character(df$Lng)
df$Lng
df$Lng <- as.numeric(df$Lng)
df$Lng
df
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.character(df$Lat)
df$Lng <- as.numeric(as.character(df$Lng))
df
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.numeric(as.character(df$Lat))
df$Lng <- as.numeric(as.character(df$Lng))
df$Lng
df$Latl
df$Lat
require(rvest)
library(magrittr)
library(stringr)
library(sf)
# Extract html data
html_data <- read_html('C:/Users/Tim/Documents/GitHub/Jonathans-Utilities/TPS/RA62/mymap0.html')
# Process html data
html_data %>%
html_nodes('script') %>%
# Extract second 'script' node
extract2(2) %>%
html_text %>%
# Regex match formula
str_match_all('title: "(.*)"') %>%
# Pull out content within ()
extract2(1) -> lat_lng
# Grab second column, split
lat_lng <- strsplit(lat_lng[,2], ", ")
# Convert to df, time
df <- as.data.frame(do.call(rbind, lapply(lat_lng, rbind)))
colnames(df) <- c("Lat", "Lng", "Timestamp")
df$Timestamp <- strptime(df$Timestamp, format = "%d-%b-%y %H.%M.%S", "UTC")
df$Lat <- as.numeric(as.character(df$Lat))
df$Lng <- as.numeric(as.character(df$Lng))
# Convert to sf object
sf_df <- st_as_sf(df,
#agr=NA_agr_,
coords=c("Lat","Lng"),
#dim="XY",
remove=FALSE)
print(df)
shiny::runApp()
install.packages('DT')
runApp()
install.packages('geosphere')
runApp()
shiny::runApp()
install.packages('fuzzyjoin')
runApp()
source("https://bioconductor.org/biocLite.R")
biocLite()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
